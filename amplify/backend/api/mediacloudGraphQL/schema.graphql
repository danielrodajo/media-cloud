type User 
  @model 
{
  id: ID!
  name: String!
  sharedFiles: [SharedFileToUser] @connection(name:"UserSharedFileToUser")
  mySharedFiles: [SharedFile] @connection(name:"OwnerSharedFiles")
  toPetition: [FriendRequest] @connection(name:"UserToPetition")
  fromPetition: [FriendRequest] @connection(name:"UserFromPetition")
  friends: [Friend] @connection(name:"UserFriends")
}

type Friend
  @model
{
  id: ID!
  name: String!
  originalId: String!
  user: User! @connection(name:"UserFriends")
}

type FriendRequest
  @model
{
  id: ID!
  type: NotificationType!
  to: User! @connection(name:"UserToPetition")
  from: User! @connection(name:"UserFromPetition")
}

type SharedFile
  @model
{
  id: ID!
  path: String! 
  owner: User! @connection(name:"OwnerSharedFiles")
  Sharers: [SharedFileToUser] @connection(name:"FileSharedFileToUser")
}

type SharedFileToUser
  @model
{
  id: ID!
  sharedFile: SharedFile! @connection(name:"FileSharedFileToUser")
  sharer: User! @connection(name:"UserSharedFileToUser")
}

enum NotificationType {
  SENDPETITION,
  ACCEPTPETITION,
  DENYPETITION,
  SENDSHAREFILE,
  STOPSENDSHAREFILE,
}